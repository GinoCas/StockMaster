#include <iostream>
#include <cmath>
#include "StockManager.h"

using namespace std;

struct StockMenu{
	string current_category = "";
	int productPage = 1;
	int categoryPage = 1;
	int productLimit = 0;
	int categoryLimit = 0;
};

StockMenu menu;
void update_menu(int), product_info(Producto, int), add_product(), my_products(vector<Producto>), edit_product(Producto), historial();

void write_menu(){
	cursor(0,9);
	for(int i = 0; i<30; i++){ //Division de pantalla
		cursor(60, i);
		cout<<"|";
	}
	cursor(0,-1);
	escribir("[esp=120][line=-]"); //Foot
	escribir("\n[esp=48]Gino Casentini @2023-2023");
	cursor(62, 3);
	escribir("[esp=58][line==]");
	cursor(83,2);
	cout<<"\033[1;36mSTOCK DISPONIBLE\033[0m\n";
}
void menu_principal(bool from_login){
	system("cls");	
	cout<<" ";
	escribir("[esp=52][line==]");
	escribir("\n[esp=12]");
	printf("\033[1;34mSTOCKMANAGER - MENÚ PRINCIPAL\033[0m\n ");
	escribir("[esp=52][line==]");
	printf("\n\n    \033[1;32mMis Productos    \033[1;33mAgregar Producto    \033[1;31mCerrar Sesión\n\n");
	printf("\033[1;36m CATEGORÍAS DISPONIBLES:\033[0m\n ",214);
	escribir("[esp=30][line=-]\n");
	opt = 0;
	opty = 0;
	if(from_login){
		menu.productPage = 1;
		menu.categoryPage = 1;
		menu.current_category = "";	
	}else if(!menu.current_category.empty()){
		int last_slash = menu.current_category.find_last_of('/');
		string mayus = mayus_transform(menu.current_category.substr(last_slash + 1));
		cursor(21-mayus.length()/2,2);
		printf("\033[2K\033[1;34mCATEGORÍA: %s\033[0m", mayus.c_str());
	}
	return update_menu(true);
}

vector<Producto> filter_products(vector<Producto> productos, string browser){
	vector<Producto> filteredProducts;
	browser = to_just_one_space(minus_transform(browser));
	for(const Producto& producto : productos){
		string product_name = to_just_one_space(minus_transform(producto.nombre));
        if(product_name.find(browser) != std::string::npos || producto.persona.find(browser) != std::string::npos){
            filteredProducts.push_back(producto);
        }
    }
    return filteredProducts;
}
vector<Producto> update_products(string browser, bool show){
	vector<Producto> products = get_products_in_category(menu.current_category);
	products = filter_products(products, browser);
	sort(products.begin(), products.end(), [](const Producto& a, const Producto& b) {
        if (a.stock > 0 && b.stock <= 0) {
            return true;
        } else if (a.stock <= 0 && b.stock > 0) {
            return false;
        }
        return a.stock < b.stock;
    });
	menu.productLimit = min(8, static_cast<int>(products.size()) - (menu.productPage - 1) * 8);
	if(menu.productLimit < 1){
		menu.productLimit = 0;
	}
	if(!show){
		return products;
	}
	empty_section(62, 5, 24, 60);
	for(int i = 0; i<menu.productLimit; i++){
		int xcursor = i % 2 == 0 ? 62 : 92;
		int id = i + (8 * (menu.productPage-1));
		cursor(xcursor, 6 + ceil(i / 2) * 5);
		string stock_text = products[id].stock > 0 ? "\033[1;32mEn Stock" : "\033[1;31mSin Stock";
		stock_text = products[i].stock < 5 && products[i].stock != 0 ? "\033[1;33mPoco Stock" : stock_text;
		cout<<"- "<<cut_text(products[id].nombre, 12)<<" * " + stock_text + "\033[0m";
		cursor(xcursor, 7 + ceil(i / 2) * 5);
		cout<<"  Usuario:"<<products[id].persona;
		if(i % 2 == 1 && i+1 != menu.productLimit){
			cursor(62, 9 + ceil(i / 2) * 5);
			escribir("[esp=58][line=-]");
		}
	}
	cursor(62, 4);
	escribir("Buscador: " + browser);
	cursor(85, 25);
	cout<<"       ";
	if(products.size() > 8){
		cursor(87, 25);
		if(menu.productPage != 1){
			cursor(85, 25);
			cout<<"<";
			cursor(87, 25);
		}
		cout<<menu.productPage<<"/"<<ceil(products.size() / 8.0);
		if(menu.productPage != ceil(products.size() / 8.0)){
			cout<<" >";
		}else{
			cout<<"  ";
		}
	}
	return products;
}
void update_category(vector<string> categories){
	empty_section(0, 9, 15, 59);
	cursor(0, 9);
	menu.categoryLimit = min(5, static_cast<int>(categories.size()) - (menu.categoryPage - 1) * 5);
	if(menu.categoryLimit < 1){
		menu.categoryLimit = 0;
	}
	for(int i = 0; i<menu.categoryLimit; i++){
		cursor(0, 9+i);
		escribir("[esp=49]");
		cursor(0, 9+i);
		printf(" - \x1B[36m%s\033[0m", categories[i + (5 * (menu.categoryPage-1))].c_str());
	}
	cursor(23, 11);
	cout<<"    ";
	if(categories.size() > 5){
		cursor(25, 11);
		if(menu.categoryPage != 1){
			cursor(23, 11);
			cout<<"<";
			cursor(25, 11);
		}
		cout<<menu.categoryPage<<"/"<<ceil(categories.size() / 5.0);
		if(menu.categoryPage != ceil(categories.size() / 5.0)){
			cout<<" >";
		}else{
			cout<<"  ";
		}
	}
	cursor(0, 9+menu.categoryLimit);
	if(usuario.admin){
		cursor(0, 9+menu.categoryLimit);
		cout<<" - \033[1;32mAgregar Categoría\033[0m";
		cursor(0, 10+menu.categoryLimit);
		cout<<" - \033[1;33mEditar Categoría\033[0m";
		cursor(0, 11+menu.categoryLimit);
		cout<<" - \033[1;31mEliminar Categoría\033[0m";
		cursor(0, 12+menu.categoryLimit);
	}
	cout<<" - \033[1;32mVolver\033[0m";	
	menu.categoryLimit += usuario.admin*3;
	return;
}
string browser = "";
void update_menu(int upd){
	bool done = false;
	vector<string> categorias = get_category_list(menu.current_category, false);
	vector<Producto> productos = update_products(browser, false);
	if(upd == 1){
		update_category(categorias); //Show categories
		write_menu();	
	}
	if(upd != 0){
		productos = update_products(browser, true); //Show products
		if(productos.size() == 0){
			cursor(75,10);
			cout<<"No hay productos para mostrar.";	
		}
	}
	int lasty = opty;
	do{
		switch(opty){
			case 0:
				cursor(0, 5);
				printf(" ->");
				cursor(0, 5);
			break;
			case 1:
				cursor(18, 5);
				printf(" ->");
				cursor(18, 5);
			break;
			case 2:
				cursor(38, 5);
				printf(" ->");
				cursor(38, 5);
			break;
			case 3:
				if(opt != 0){
					cursor(62, 6 + (opt-1) * 5);
					printf(">");
					cursor(61, 6 + (opt-1) * 5);
					break;
				}
				browser = input_text(browser, 48, 3, '\0', 50, 72, 4, ceil(menu.productLimit/2.0)+(menu.productLimit == 0));
				if(last_char == '\r'){
					menu.productPage = 1;
					productos = update_products(browser, true);
					if(productos.size() == 0){
						cursor(75,10);
						cout<<"No hay productos para mostrar.";
					}
				}
				if(opt != 0 && menu.productLimit == 0){
					opt = 0;
					opty = 3;
				}
			continue;
			case 4:
				if(opt == 0){
					opty = 3;
					continue;
				}
				if(menu.productLimit - 2 * (opt-1) == 1){
					opty = lasty == 3 ? 0 : opty-1;
					opt = lasty == 3 ? 0 : opt;
					continue;
				}
				cursor(92, 6 + (opt-1) * 5);
				printf(">");
				cursor(91, 6 + (opt-1) * 5);
			break;
		}
		lasty = opty;
		if((opt == 0 && opty < 3) || (opty > 2 && opt != 0)){
			last_char = getch();
		}
		if(opty > 2){
			change_option_two_dim(5, ceil((menu.productLimit-1)/2) + 1);
			if(opty == 5){
				if(menu.productPage == ceil(productos.size() / 8.0)){
					opty = 0;
					opt = 0;
					printf(" -");
					continue;
				}
				menu.productPage++;
				opty = 3;
				productos = update_products(browser, true);
				opt = opt > ceil(menu.productLimit / 2.0) ? ceil(menu.productLimit / 2.0) : opt;
				cursor(61, 5 + (opt-1) * 5);
				continue;
			}
			if(opty == 2){
				if(menu.productPage != 1){
					menu.productPage--;
					opty = 4;
					productos = update_products(browser, true);
					cursor(61, 5 + (opt-1) * 5);
					continue;
				}
			}
		}else{
			if(opt != 0){
				done = true;
				if(opt == 1){
					opt--;	
				}
				opty = -1;
				printf("    ");
				continue;
			}
			change_option_two_dim(3, 10);	
		}
		done = last_char == '\r';
		if(!done){
			if(lasty > 2 && opty < 3){
				opt = 0;
			}
			if(lasty > 2){
				printf(" -");
			}else{
				printf("   ");	
			}
			continue;
		}else if(opty == 1 && categorias.empty() && menu.current_category == ""){
			cursor(0, 20);
			escribir("[esp=50]");
			cursor(0,20);
			cout<<"\033[1;31mNo hay ninguna categoria creada.\033[0m";
			done = false;
			continue;
		}
		cursor(0, 20);
		escribir("[esp=50]");
		if(opty == 0){
			empty_section(0,5, 24, 59);
			done = true;
		}
	}while(!done);
	switch(opty){
		case 0:
		return my_products(productos);
		case 1:
			add_product();
			return menu_principal(false);
		break;
		case 2:
			opty = 0;
			do{
				cursor(0, 20);
				cout<<"¿Estás seguro que quieres cerrar sesión?   Sí   No";
				cursor(42 + 5*opty, 20);
				cout<<">";
				cursor(42 + 5*opty, 20);
				last_char = getch();
				change_option_y(1);
				if(last_char == '\r'){ break; }	
			}while(true);
			cursor(0,20);
			escribir("[esp=59]");
			if(opty == 1){
				opty = 2;
				return update_menu(0);
			}
		return;
	}
	if(opty > 2){
		int id = (menu.productPage - 1) * 8 + (opty-3) + 2 * (opt-1);
		return product_info(productos[id], 2);
	}
	done = false;
	int lastx = opt;
	opty = menu.categoryPage-1;
	do{
		if(opty+1 != menu.categoryPage){
			menu.categoryPage = opty+1;
			update_category(categorias);
		}
		if(opt > menu.categoryLimit){
			opt = menu.categoryLimit;
		}
		lastx = opt;
		cursor(0, 9+opt);
		printf(" >");
		cursor(0, 9+opt);
		last_char = getch();
		change_option_two_dim(ceil((categorias.size()-1) / 5), menu.categoryLimit);
		printf(" -");
		done = last_char == '\r';
		if((lastx == 0 && last_char == 72) || lastx == menu.categoryLimit && last_char == 80){
			opty = 0;
			opt = 0;
			return update_menu(false);
		}
	}while(!done);
	string mayus, update;
	if(opt == menu.categoryLimit){
		if(menu.current_category.empty()){
			opty = 0;
			do{
				cursor(0, 20);
				cout<<"¿Estás seguro que quieres cerrar sesión?   Sí   No";
				cursor(42 + 5*opty, 20);
				cout<<">";
				cursor(42 + 5*opty, 20);
				last_char = getch();
				change_option_y(1);
				if(last_char == '\r'){ break; }	
			}while(true);
			cursor(0,20);
			escribir("[esp=59]");
			if(opty == 1){
				opty = 2;
				return update_menu(0);
			}
			return;
		}
		int ult_barra = menu.current_category.rfind('/');
		int ant_barra = menu.current_category.rfind('/', ult_barra-1);
		if(ult_barra != string::npos){
			update = menu.current_category;
			update = update.erase(ult_barra);
			if(update.length() != 0){
				mayus = mayus_transform(update.substr(ant_barra + 1));	
			}	
		}
		opt = 30;	
	}else{
		if(usuario.admin && opt > menu.categoryLimit-4){
			int last_slash;
			vector<string> category_list = get_category_list("", true);
			string current_category = "";
			cursor(0,20);
			escribir("[esp=50]");
			if(category_list.size() != 0){
				current_category = menu.current_category.empty() ? category_list[0] : menu.current_category;	
			}
			if(opt == menu.categoryLimit-3){
				do{
					cursor(0,20);
					cout<<" Nombre de la categoría:";
					current_category = input_text("", 20, 0, '\0', 44, 25, 20, 0);
					cursor(0,19);
					escribir("[esp=59]");
					if(current_category.empty()){
						cursor(0,19);
						cout<<"\033[1;31mNo se puede crear una categoría sin nombre.\033[0m";
						continue;
					}	
					break;
				}while(true);
				add_text_to_file("Computacion.txt", current_category + "{\n\n}", get_category(menu.current_category, 1) + 1);
			}
			if(opt == menu.categoryLimit-2){
				do{
					cursor(0,20);
					escribir("[esp=59]");
					cursor(0,20);
					last_slash = current_category.find_last_of('/');
					cout<<" Seleccione una categoría: ← "<<current_category.substr(last_slash + 1)<<" →";
					current_category = select_category(current_category, -1);
					if(last_char == '\r'){
						break;
					}
				}while(true);
				cursor(0,20);
				escribir("[esp=59]");
				cursor(0,20);
				last_slash = current_category.find_last_of('/');
				string edited_cat = current_category.substr(last_slash + 1);
				cout<<" Editar categoría: "<<edited_cat;
				edited_cat = input_text(edited_cat, 20, 0, '\0', 44, 20, 20, 0);
				int line = get_category(current_category, true);
				replace_text_at_line(edited_cat + "{", line+1);
			}
			if(opt == menu.categoryLimit-1){
				do{
					cursor(0,20);
					escribir("[esp=59]");
					cursor(0,20);
					last_slash = current_category.find_last_of('/');
					cout<<" Seleccione una categoría: "<<current_category.substr(last_slash + 1);
					current_category = select_category(current_category, -1);
					if(last_char == '\r'){
						break;
					}
				}while(true);
				empty_section(0, 19, 3, 59);
				last_slash = current_category.find_last_of('/');
				cursor(0,19);
				cout<<"Selección: \x1B[36m"<<current_category.substr(last_slash + 1)<<"\033[0m";
				cursor(0,20);
				cout<<"¿Estás seguro que quieres eliminar esta categoría?"<<endl<<"\033[1;31mSe borraran las subcategorías y productos dentro de esta.\033[0m";
				opty = 0;
				do{
					cursor(23,22);
					cout<<"Sí   No";
					cursor(21 + 5*opty, 22);
					cout<<">";
					cursor(20 + 5*opty, 22);
					last_char = getch();
					change_option_y(1);
					if(last_char == '\r'){ break; }
					cout<<"  ";
				}while(true);
				if(opty == 1){
					return update_menu(1);
				}
				delet_category(current_category);
				return menu_principal(true);
			}
			opty = 0;
			return update_menu(1);
		}
		int id = opt + (5 * (menu.categoryPage-1));
		mayus = mayus_transform(categorias[id]);		
		update = menu.current_category + "/" + categorias[id];
		opt = 1;
		menu.productPage = 1;
		menu.categoryPage = 1;
	}
	cursor(21-mayus.length()/2,2);
	if(update.length() != 0){
		printf("\033[2K\033[1;34mCATEGORÍA: %s\033[0m", mayus.c_str());
	}else{
		if(menu.current_category == ""){
			return update_menu(0);
		}
		cursor(13,2);
		printf("\033[2K\033[1;34mSTOCKMANAGER - MENÚ PRINCIPAL\033[0m", mayus.c_str());
	}
	menu.current_category = update;
	update_menu(true);
}

void product_info(Producto product, int upd){
	const int line = ceil(product.descripcion.length() / 44);
	if(upd != 0 && upd != 3){
		cursor(85, 25);
		cout<<"       ";
		cout<<"\033[K";
		string nomb_mayus = mayus_transform(product.nombre);
		cursor(62,2);
		escribir("[esp=59]");
		cursor(60 + (26-nomb_mayus.length()/2),2);
		cout<<"\033[1;36mPRODUCTO: "<<nomb_mayus<<"\033[0m\n";
		empty_section(62, 5, 24, 60);
		cursor(62, 5);
		cout<<"\033[1;33mCaracteristicas\033[0m";
		cursor(62,6);
		escribir("[esp=20][line=-]");
		cursor(62, 7);
		cout<<"\033[0m>\x1B[36m Categoría: "<<product.categoria;
		cursor(62, 8);
		cout<<"\033[0m>\x1B[36m Stock: "<<product.stock<<" unidades";
		cursor(62, 9);
		cout<<"\033[0m>\x1B[36m Descripción:";
		show_text_in_margin(product.descripcion, 77, 44, 9);
		cursor(62, 10 + line);
		cout<<"\033[0m>\x1B[36m Cargado por: "<<product.persona<<"\033[0m";	
	}
	cursor(62, 11 + line);
	if(product.persona != usuario.name && !usuario.admin){
		escribir("Presione una tecla para volver...");
		getch();
		cursor(62,2);
		cout<<"\033[K";
		return update_menu(1);
	}
	escribir("[esp=15]Editar    Eliminar    Volver");
	int lasty = opty;
	opty = 0;
	do{
		switch(opty){
			case 0:
				cursor(75, 11 + line);
				cout<<">";
				cursor(74, 11 + line);
			break;
			case 1:
				cursor(85, 11 + line);
				cout<<">";
				cursor(84, 11 + line);
			break;
			case 2:
				cursor(97, 11 + line);
				cout<<">";
				cursor(96, 11 + line);
			break;
		}
		last_char = getch();
		change_option_y(2);
		cout<<"  ";
		if(last_char == '\r'){ break; }
	}while(true);
	switch(opty){
		case 0:
			edit_product(product);
		return;
		case 1:
			opty = 0;
			do{
				cursor(62, 11 + line);
				escribir("[esp=50]");
				cursor(77, 11 + line);
				cout<<"¿Estás seguro?   Sí   No";
				cursor(92 + 5*opty, 11 + line);
				cout<<">";
				cursor(91 + 5*opty, 11 + line);
				last_char = getch();
				change_option_y(1);
				if(last_char == '\r'){ break; }
			}while(true);
			if(opty == 1){
				opty = lasty;
				return product_info(product, 3);
			}
			add_text_to_file("Historial.txt", product.persona + ";" + "Se quitó el producto " + product.nombre + ". " + get_day() + ' ' + get_hour(), 1);
			delet_line_from_file(find_product(product));
		return menu_principal(false);
		case 2:
			opty = lasty;
			if(upd == 2 || upd == 3){
				cursor(62,2);
				cout<<"\033[K";
				return update_menu(1);
			}
			vector<Producto> c_products = get_products_in_category(menu.current_category);
		return my_products(c_products); //update_menu(1);
	}
}

void my_products(vector<Producto> products){
	cursor(0,2);
	escribir("[esp=59]");
	cursor(22,2);
	cout<<"MIS PRODUCTOS";
	int count = 0;
	vector<Producto> c_products;
	for(int i = 0; i<products.size(); i++){
		if(products[i].persona != usuario.name){
			continue;
		}
		cursor(0, 4+count);
		count++;
		if(count < 11){
			string stock_text = products[i].stock > 0 ? "\033[1;32mEn Stock" : "\033[1;31mSin Stock";
			stock_text = products[i].stock < 5 && products[i].stock != 0 ? "\033[1;33mPoco Stock" : stock_text;
			cout<<" - "<<products[i].nombre<<" * " + stock_text + "\033[0m";	
		}	
		c_products.push_back(products[i]);
	}
	int pages = ceil((c_products.size()-1) / 10), page = 1;
	count = min(10, static_cast<int>(c_products.size()));
	if(c_products.size() == 0){
		cursor(0, 4);
		cout<<" - No hay productos para mostrar.";
	}
	cursor(0, 5+count+(c_products.size() == 0));
	escribir("[esp=13]- Movimientos   - Volver");
	bool done = false;
	opt = 0;
	opty = 0;
	int lasty = 0;
	do{
		if(page != opty+1 && opt != count){
			page = opty+1;
			empty_section(0, 4, 25, 59);
			cursor(0, 4);
			count = 0;
			for(int i = 0; i<c_products.size(); i++){
				if(i < 10*page && i >= 10*(page-1)){
					string stock_text = products[i].stock > 0 ? "\033[1;32mEn Stock" : "\033[1;31mSin Stock";
					stock_text = products[i].stock < 5 && products[i].stock != 0 ? "\033[1;33mPoco Stock" : stock_text;
					cout<<" - "<<products[i].nombre<<" * " + stock_text + "\033[0m"<<endl;
					count++;	
				}	
			}
			cursor(0, 5+count);
			int max_of_page = min(10, static_cast<int>(c_products.size()) - (page - 1) * 10);
			opt = opt > max_of_page ? max_of_page-1 : opt;
			escribir("[esp=13]- Movimientos   - Volver");
		}
		if(pages > 0){
			cursor(0, 4+count);
			escribir("[esp=20]");
			cursor(0, 4+count);
			cout<<" ← "<<page<<"/"<<pages+1<<" →";
		}
		if(opt != count){
			cursor(2, 4+opt);
			cout<<">";	
			cursor(1, 4+opt);
		}else{
			cursor(14 + 16 * opty, 5+count+(c_products.size() == 0));
			cout<<">";
			cursor(13 + 16 * opty, 5+count+(c_products.size() == 0));
		}
		last_char = getch();
		if(opt == count){

			change_option_two_dim(1,count);
			if(opt != count){
				opty = lasty;
			}
		}else{
			change_option_two_dim(pages,count);
			lasty = opty;
		}
		cout<<" -";
		done = last_char == '\r';
	}while(!done);
	if(opt == count){
		if(opty == 1){
			return menu_principal(1);	
		}
		if(opty == 0){
			historial();
			empty_section(0, 4, 25, 59);
			return my_products(products);
		}
	}
	return product_info(c_products[opt], true);
}

void historial(){
	empty_section(0, 0, 29, 120);
	cursor(50,2);
	cout<<"MOVIMIENTOS";
	cursor(29,1);
	escribir("[esp=52][line==]");
	cursor(29,3);
	escribir("[esp=52][line==]");
	int page = 1, lasty = 0;
	opty = 0;
	do{
		cursor(0,4);
		page = ceil(show_history(opty+1) / 20.0);
		if(page > 1){
			cout<<" ← "<<opty+1<<"/"<<page<<" →"<<endl;
		}
		cout<<"\n > Volver";
		cursor(0,-1);
		lasty = opty;
		do{
			last_char = getch();
			change_option_y(page-1);
			if(last_char == '\r'){
				break;
			}	
		}while(opty == lasty);
		if(last_char == '\r'){
			break;
		}
		empty_section(0, 4, 25, 120);
	}while(true);
	system("cls");
	cout<<" ";
	escribir("[esp=52][line==]");
	printf("\n\n ");
	escribir("[esp=52][line==]");
	write_menu();
	update_products("", true);
}

void edit_product(Producto product){
	int line = find_product(product);
	vector<string> categories = get_category_list("", true);
	string current_category = "";
	int last_slash;
	for(int i = 0; i<categories.size(); i++){
		last_slash = categories[i].find_last_of('/');
		if(categories[i].substr(last_slash + 1) == product.categoria){
			current_category = categories[i];
			break;
		}
	}
	empty_section(0, 4, 25, 59);
	cursor(0,2);
	escribir("[esp=59]");
	cursor(21,2);
	printf("EDITAR PRODUCTO\n ");
	cursor(0,5);
	cout<<"\033[1;37m Nombre: \033[1;33m"<<product.nombre<<"\n \033[1;37mStock: \033[1;33m"<<product.stock<<"\033[1;37m\n Categoría: \033[1;33m"<<product.categoria<<"\033[1;37m\n Descripción:\033[1;33m";
	show_text_in_margin(product.descripcion, 15, 44, 8);
	after_text = "\033[1;37m\n Cargado por: \033[1;33m" + product.persona + "\033[1;37m\n                    Aceptar    Cancelar\033[1;33m";
	cout<<after_text;
	opt = 0, opty = 0;
	int line_desc = 8, last_stock = product.stock;
	string last_name = product.nombre;
	do{
		switch(opt){
			case 0:
				cursor(10+product.nombre.length(),5);
				product.nombre = input_text(product.nombre, 44, 4, '\0', 50, 10, 5, 0);
			break;
			case 1:
				cursor(9,6);
				escribir("[esp=10]");
				cursor(9,6);
				cout<<product.stock;
				product.stock = input_number(product.stock, 999999, 4);
			break;
			case 2:
				cursor(13,7);
				escribir("[esp=40]");
				cursor(13,7);
				last_slash = current_category.find_last_of('/');
				cout<<current_category.substr(last_slash+1)<<" ← →";
				current_category = select_category(current_category, 4);
				last_slash = current_category.find_last_of('/');
				cursor(13+current_category.substr(last_slash+1).length(),7);
				cout<<"    ";
				opty = 0;
			break;
			case 3:
				product.descripcion = input_text(product.descripcion, 790, 4, '\0', 44, 15, 8, 0);
			break;
			case 4:
				line_desc = 10 + ceil(product.descripcion.length() / 44);
				cursor(18 + opty*11, line_desc);
				cout<<"->";
				cursor(18 + opty*11, line_desc);
				last_char = getch();
				change_option_two_dim(1,3);
				cout<<"  ";
			break;
		}
		line_desc = 10 + ceil(product.descripcion.length() / 44);
		cursor(0, line_desc+1);
		escribir("[esp=59]");
		if(last_char == '\r' && opt == 4){
			if(opty == 0){
				cursor(0, line_desc+1);
				if(product.nombre.empty()){
					cout<<"\033[1;31mNo se puede añadir un producto sin nombre.\033[1;33m";
					continue;	
				}
				if(last_name != product.nombre && find_product(product) != -1){
					cout<<"\033[1;31mYa tienes un producto igual a este.\033[1;33m";
					continue;
				}
			}
			break;
		}
		if(last_char == '\r'){
			opt++;
		}
	}while(true);
	cout<<"\033[0m";
	if(opty == 1){
		return menu_principal(false);
	}
	if(last_stock != product.stock){
		add_text_to_file("Historial.txt", product.persona + ";" + "Se actualizo el stock de " + product.nombre + ": " + to_string(product.stock) + " unidades. " + get_day() + ' ' + get_hour(), 1);
	}else{
		add_text_to_file("Historial.txt", product.persona + ";" + "Se modificó el producto " + product.nombre + ". " + get_day() + ' ' + get_hour(), 1);
	}
	last_slash = current_category.find_last_of('/');
	string current_product =  product.nombre + ';' + to_string(product.stock) + ';' + product.persona + ';' + product.descripcion + ';';
	if(current_category.substr(last_slash+1) != product.categoria){
		delet_line_from_file(line);
		line = get_category(current_category, true) + 1;
		add_text_to_file("Computacion.txt", current_product, line);	
		return menu_principal(false);
	}
	replace_text_at_line(current_product, line);
	return menu_principal(false);
}
void add_product(){
	int line;
	vector<string> categories = get_category_list("", true);
	string current_category = menu.current_category.empty() ? categories[0] : menu.current_category;
	int last_slash = current_category.find_last_of('/');
	empty_section(0, 4, 25, 59);
	cursor(0,2);
	escribir("[esp=59]");
	cursor(20,2);
	printf("AGREGAR PRODUCTO\n ");
	cursor(0,5);
	Producto product;
	cout<<"\033[1;37m Nombre:\n Stock: \033[1;33m"<<product.stock<<"\033[1;37m\n Categoría: \033[1;33m"<<current_category.substr(last_slash+1)<<"\033[1;37m\n Descripción:\n Cargado por: \033[1;33m"<<usuario.name<<"\033[1;37m";
	cout<<"\n                    Agregar    Cancelar\033[1;33m";
	opt = 0, opty = 0;
	int line_desc = 8;
	cursor(0,22);
	product.persona = usuario.name;
	do{
		switch(opt){
			case 0:
				cursor(10+product.nombre.length(),5);
				product.nombre = input_text(product.nombre, 45, 4, '\0', 50, 10, 5, 0);
			break;
			case 1:
				cursor(9,6);
				escribir("[esp=10]");
				cursor(9,6);
				cout<<product.stock;
				product.stock = input_number(product.stock, 999999, 4);
			break;
			case 2:
				cursor(13,7);
				escribir("[esp=40]");
				cursor(13,7);
				last_slash = current_category.find_last_of('/');
				cout<<current_category.substr(last_slash+1)<<" ← →";
				current_category = select_category(current_category, 4);
				last_slash = current_category.find_last_of('/');
				cursor(13+current_category.substr(last_slash+1).length(),7);
				cout<<"    ";
				opty = 0;
			break;
			case 3:
				after_text = "\033[1;37m\n Cargado por: \033[1;33m" + usuario.name + "\033[1;37m\n                    Aceptar    Cancelar\033[1;33m";
				product.descripcion = input_text(product.descripcion, 790, 4, '\0', 44, 15, 8, 0);
			break;
			case 4:
				line_desc = 10 + ceil(product.descripcion.length() / 44);
				cursor(18 + opty*11, line_desc);
				cout<<"->";
				cursor(18 + opty*11, line_desc);
				last_char = getch();
				change_option_two_dim(1,3);
				cout<<"  ";
			break;
		}
		line_desc = 10 + ceil(product.descripcion.length() / 44);
		cursor(0, line_desc+1);
		escribir("[esp=59]");
		if(last_char == '\r' && opt == 4){
			if(opty == 0){
				cursor(0, line_desc+1);
				if(product.nombre.empty()){
					cout<<"\033[1;31mNo se puede añadir un producto sin nombre.\033[1;33m";
					continue;	
				}
				if(find_product(product) != -1){
					cout<<"\033[1;31mYa tienes un producto igual a este.\033[1;33m";
					continue;
				}
			}
			break;
		}
		if(last_char == '\r'){
			opt++;
		}
	}while(true);
	cout<<"\033[0m";
	if(opty == 1){
		return;
	}
	line = get_category(current_category, true);
	add_text_to_file("Historial.txt", usuario.name + ";" + "Se agregó el producto " + product.nombre + ". " + get_day() + ' ' + get_hour(), 1);
	add_text_to_file("Computacion.txt", product.nombre + ';' + to_string(product.stock) + ";" + usuario.name + ';' + product.descripcion + ';', line+1);
}